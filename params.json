{
  "name": "Easy-to-Understand Computed Tomography ",
  "tagline": "Simple and Educational Parallel-Beam Computed Tomography Simulator (Implemented Both in MATLAB and CUDA)",
  "body": "# Motivation and Ultimate Goal\r\nWhen I first learned how computed tomography worked, it was mostly through mathematics and I never implemented the algorithms to perform the image reconstruction myself. Instead, I used MATLAB built-in functions like radon and iradon to do things for me. The obvious downside to using these built-ins was that I never got to understand and implement the actual algorithms. The few resources I could find had very complicated implementations and did a poor job of helping me to understand how to implement these algorithms from scratch. \r\n\r\nFortunately, after some time, I implemented a simple and easy-to-understand parallel-beam CT system in MATLAB without the use of radon and iradon. All the MATLAB files are short and well-commented, and I make extensive use of meshgrid, interp1, and interp2 functions to simplify many steps in the algorithms. \r\n\r\nThe goal of this code is NOT to provide a comprehensive toolkit that enables you to reconstruct an image for an arbitrary CT system, but rather to provide key insights on how a simple parallel-beam CT system works. Once this simple example is understood, it should be much easier to simulate larger CT systems with different imaging geometries, because at that point, CT really just becomes a big geometry problem. \r\n\r\n# Elegant and Simple Derivation\r\n## What does a CT system do?\r\nA CT system effectively takes multiple projections of an object and tries to estimate what the object looks like at every point in space based on those projections. Here we say that the intensity of the object we are taking the projections of is f(x,y). In this parallel-beam geometry, in order to project f(x,y) onto a line, we must integrate f(x,y) along lines orthogonal to the line (...really plane) we are projecting onto. If we rotate this projection line, we can show how this projected profile changes as a function of angle: this is known as the sinogram or radon transform of f(x,y). \r\n\r\n![](https://cloud.githubusercontent.com/assets/10136046/18261138/5d015ace-73a9-11e6-9224-a74f51d615e8.png)\r\n\r\nAs it turns out, the projection of an object onto a plane can be analyzed using the Fourier-Slice (or Projection-Slice) Theorem, which basically says the Fourier transform of the projection of an object directly gives you values in the Fourier domain representation of the object. See the brief explanation of Fourier-Slice Theorem below:\r\n\r\n![](https://cloud.githubusercontent.com/assets/10136046/18261140/5d285110-73a9-11e6-9edd-7ee35c30b88f.png)\r\n\r\nNow that we understand how a CT system takes projections of an object at various angles and how Fourier Slice Theorem can be used to recover the Fourier spectrum of the object we are trying to reconstruct, we can now derive the process needed to reconstruct the object based on its projections: \r\n\r\n![](https://cloud.githubusercontent.com/assets/10136046/18261139/5d274a68-73a9-11e6-9a66-14fdcb298354.png)\r\n\r\nNote that the result provides an exact algorithm on how to exactly recover the object function f(x,y). We first have to ramp filter the sinogram. This basically means multiplying the Fourier transform of each projection profile by the absolute value of frequency and then taking the inverse Fourier transform. We then backproject this ramp-filtered sinogram back into the image we are trying to reconstruct. The best way to visualize this is to pretend that the reconstructed image starts off as a white canvas. Then, we take the ramp-filtered profile and smear it into the canvas at the angle the profile was initially projected at. **Example Demonstration** illustrates these steps.\r\n\r\n## Example Demonstration\r\n### Original Object Image\r\n\r\n### Ramp-Filtered Sinogram\r\n\r\n### Backprojection Animation\r\n![](http://www.reactiongifs.us/wp-content/uploads/2013/10/nuh_uh_conan_obrien.gif)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}